// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

// SELECTOR GATE TO USE: Mux4Way16 should suffice here as all permutations of zx & nx are covered here:
// {i.e. x is zeroed and negated (zx = 1, nx = 1),
//  x is only zeroed (zx = 1, nx = 0),
//  x is only negated (zx = 0, nx = 1),
//  x is neither zeroed nor negated (zx = 0, nx = 0)}

// A 4-way mux is an if-then-elif-elif-else
//     if S1=0 and S2=0
//         M=A
//     elif S1=0 and S2=1
//         M=B
//     elif S1=1 and S2=0
//         M=C
//     else -- S1=1 and S2=1
//         M=D
//     endif

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // use some variation of Mux in order to toggle between inputs
   // we have 6 inbounding toggle switches and 2, 16-bit gates so which Mux resembles that sort of schema??
   // 2 toggle switches for x, 2 toggle switches for y and 2 toggle switches for the result of X and Y

    //Zero out X bus
    // -> Complementary Law: A * (~A) = 0
    Not16(in=x[0..15], out=notx);
    And16(a=x[0..15], b=notx, out=zeroedx);

    // Negate X bus
    // -> Not16 Gate
    // this bus is generated from Complementary Law side effect

    // Zero and Negate x
    Not16(in=zeroedx, out=max16bitvalueX);

    // Insert into Mux4Way16
    Mux16(a=x[0..15], b=zeroedx, sel=zx, out=tmp1);
    Mux16(a=notx, b=max16bitvalueX, sel=zx, out=tmp2);
    Mux16(a=tmp1, b=tmp2, sel=nx, out=transformedx);

    //Zero out Y bus
    // -> Complementary Law: A * (~A) = 0
    Not16(in=y[0..15], out=noty);
    And16(a=y[0..15], b=noty, out=zeroedy);

    // Negate Y bus
    // -> Not16 Gate
    // this bus is generated from Complementary Law side effect

    // Zero and Negate x
    Not16(in=zeroedy, out=max16bitvalueY);

    // Insert into Mux4Way16
    Mux16(a=y[0..15], b=zeroedy, sel=zy, out=tmp11);
    Mux16(a=noty, b=max16bitvalueY, sel=zy, out=tmp21);
    Mux16(a=tmp11, b=tmp21, sel=ny, out=transformedy);

    // X + Y
    Add16(a=transformedx, b=transformedy, out=sumofXY);

    // X & Y
    And16(a=transformedx, b=transformedy, out=XbitwiseAndY);


    // compute out = x + y (if 1) or x & y (if 0)
    Mux16(a=XbitwiseAndY, b=sumofXY, sel=f, out=FontoXandY);


    // if (no == 1) set out = !out
    Not16(in=FontoXandY, out=NotFontoXandY);

    Mux16(a=FontoXandY, b=NotFontoXandY, sel=no, out=tmpout);

    // zr == 1 if (out == 0), 0 otherwise
    // AHH HA MOMENT: OR all 16-bits in output into a 1-bit output
    // if at least 1 bit is a one, then output != 0
    // else if 1-bit output == 0, indeed output is 0
    Or16Way(in=tmpout, out=selector);
    Mux(a=true, b=false, sel=selector, out=tmpzr);


    // ng; // 1 if (out < 0),  0 otherwise
    // AHH HA MOMENT: Perform 2's Complement on assuming negative number and Check MSB (most-significant-bit)
    // According to Chapter 2 of "The Elements of Computing Systems":
    // "The codes of all positive nubers begin with a 0."
    // "The codes of all negative numbers begin with a 1."
    // With this fact, we can perform 2's Complement on Negative number
    // to transform it to a positive number:
    // if MSB(2'SComplement(output)) == 0, it's indeed a signed number and ng = 1! (Except when output = 0!!)
    // else MSB(2'SComplement(output)) == 1, it was a positive number hence ng = 0!

    // Performing 2's Complement
    Not16(in=tmpout, out=flippedTmpout);
    Or16(a=tmpout, b=flippedTmpout, out=max16bitvalue); //max16bitvalue=65535

    Not16(in=max16bitvalue, out=min16bitvalue); //min16bitvalue=0
    ConvertLSB(in=min16bitvalue, out=valueof1in16bit);
    Add16(a=tmpout, b=valueof1in16bit, out=TwoComplementofTmpOut);
    ExtractMSB(in=TwoComplementofTmpOut, out=toggleSwitch);

    //FIXME: need some case logic to determine ng value only if zr == 0
    // Specifically, if zr == 1 (implies output = 0), ng must be set to 0.
    // Otherwise, if zr == 0 (implies that out != 0), thus ng must be calculated with mux gate below!
    Mux(a=true, b=false, sel=toggleSwitch, out=tmpng);
    Mux(a=tmpng, b=false, sel=tmpzr, out=ng);
    
    //Double Negative Law to output 16-bit result
    Not16(in=tmpout, out=nottmpout);
    Not16(in=nottmpout, out=out);

    //Double Negative Law to output zr result
    Not(in=tmpzr, out=nottmpzr);
    Not(in=nottmpzr, out=zr);

}