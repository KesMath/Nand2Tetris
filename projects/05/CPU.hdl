// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Recall: Hack Platform consists of only 2 types of instructions:
    // Address Instruction (MSB opt-code = 0) & Compute Instruction (MSB opt-code = 1)
    // NOTE: when instruction opt-code is 0, we want instruction to be fed in from the ROM chip
    // else when opt-code is 1, we want instruction to be fed in from ALU output 

    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=ARegisterInput);
    // FIXME: there is a load bit discrepancy... if opt-code is chosen, A instruction will not get loaded into register since write bit will be 0!
    // but C instruction will get loaded since it's opt-code is 1 which is quite ironic here ... (A instruction doesn't even get to get loaded into it's own register!)

    // Question 1: Sanity check that both A and C instruction needs to get stored in A register? True b/c it's implied by output of Mux16
    // Question 2: Can we devise logic implementation in which when opt-code is 0 (i.e. A instruction is present), we flip it to 1 so it persists in register
    // else when opt-code is 1 (i.e. C instruction is present), keep it as is!

    Not(in=instruction[15], out=invertIn);
    Or(a=invertIn, b=instruction[15], out=orOut);
    ARegister(in=ARegisterInput, load=orOut, out=addressM); 

}