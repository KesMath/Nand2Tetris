// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ###################### LANGUAGE SPECIFICATION ####################################### 
    // Recall: Hack Platform consists of only 2 types of instructions:
    // Address Instruction (MSB opt-code = 0) & Compute Instruction (MSB opt-code = 1)
    // NOTE: when instruction opt-code is 0, we want instruction to be fed in from the ROM chip
    // else when opt-code is 1, we want instruction to be fed in from ALU output
    // #################################################################################### 


    // ############## ALU output destination logic for ARegister ##############
    // load bit for A-Register is determined from two conditions:
    // if MSB has opt-code of 0 and instruction[5] {=d1} is true

    // also, if d1 is set, we load ALUOutput into A-reg
    // if MSB is set, we set instruction into A-reg

    Not(in=instruction[15], out=NotAIns); // need to negate signal given that AND with 0 operand will always lead to load being off
    And(a=instruction[5], b=NotAIns, out=loadA); 
    Mux16(a=instruction, b=ALUOutput, sel=loadA, out=ARegisterInput);
    ARegister(in=ARegisterInput, load=loadA, out=ARegisterOut, out[0..14]=addressM);

    Mux16(a=inM, b=ARegisterOut, sel=instruction[12], out=aluInput);
    // #########################################################################


    // ############## ALU output destination logic for DRegister ##############

    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUOutput, load=loadD, out=DRegisterOut);

    // #########################################################################  


    ALU(x=DRegisterOut, y=aluInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, out=outM, zr=zr, ng=ng);


    // ############################# writeM Logic per Diagram #########################################
    And(a=instruction[15], b=instruction[3], out=writeM); //write to RAM[A] when address is C-type Instruction
    // ################################################################################################


    // ############################## Jump Logic ######################################################
    //JUMP DECISION: J = TRUE if ... f(jump bits, ALU control outputs) = 1, else 0
    // USING PRODUCT OF SUMS: given that truth table of {j1,j2,j3,zr,ng} has outputs mostly = 1 except for no jump case statements
    Or(a=instruction[0], b=instruction[1], out=tmpout0);
    Or(a=tmpout0, b=instruction[2], out=tmpout1);
    Or(a=tmpout1, b=zr, out=tmpout2);
    Or(a=tmpout2, b=ng, out=tmpload);

    //confirm it's a C instruction with MSB
    And(a=instruction[15], b=tmpload, out=loadPC);

    Mux(a=true, b=false, sel=loadPC, out=inc);
    PC(in=ARegisterOut, load=loadPC, inc=inc, reset=reset, out[0..14]=pc);
    // ##############################################################################################
}