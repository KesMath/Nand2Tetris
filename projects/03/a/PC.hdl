// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

// So, no matter the input combination, if reset is true, then you perform only reset;
// if it is false, and load is true, then you perform only load;
// only if reset and load are false you take inc into account

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    //Complementary Law for Reset: A * (~A) = 0
    Not16(in=in, out=notin);
    And16(a=in, b=notin, out=zero);

    // Incremented Value
    Inc16(in=regout, out=incrementedinput);


    // (1) What should the load signal 
    // (load=1 is write value and load=0 is read value) to the register be
    // (~A) + (~B) + (~C) = Output
    Not(in=reset, out=notreset);
    Not(in=load, out=notload);
    Not(in=inc, out=notinc);
    Or(a=notreset, b=notload, out=tmp);
    Or(a=tmp, b=notinc, out=loadsignal);


    // (2) Which 16-bit value (zero, original input or incremented) should be forwarded/saved by the register
    Mux16(a=regout, b=incrementedinput, sel=inc, out=tmpout0);
    Mux16(a=tmpout0, b=in, sel=load, out=tmpout1);
    Mux16(a=tmpout1, b=zero, sel=reset, out=tmpout2);
    Register(in=tmpout2, load=loadsignal, out=regout, out=out);

}
